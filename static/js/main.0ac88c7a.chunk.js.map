{"version":3,"sources":["components/Search.jsx","services/getPokemon.js","components/PokemonData.jsx","pages/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","props","React","useState","search","setSearch","Container","Form","className","Row","Col","sm","Control","onChange","e","target","value","placeholder","Button","block","onClick","getPokemon","baseUrl","query","fetchPokemon","pokemon","a","console","log","fetch","PokemonData","xs","md","Card","Header","name","src","sprite","alt","Body","abilities","map","ability","key","types","type","stats","stat","ProgressBar","now","base_stat","max","label","spinnerStyle","width","height","borderWidth","spinnerWrapperStyle","textAlign","marginTop","HomePage","setPokemon","loading","setLoading","error","setError","errorMsg","setErrorMsg","setTimeout","response","json","results","Alert","variant","style","Spinner","animation","sprites","front_default","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0ac88c7a.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Container, Col, Button } from 'react-bootstrap';\n\n\nexport default function Search(props) {\n\n  const [search, setSearch] = React.useState('');\n  \n  return (\n    <Container>\n      <Form className=\"mt-2\">\n        <Form.Row className=\"align-items-center\">\n          <Col sm={10} className=\"my-1\">\n            <Form.Control\n              onChange={(e) => setSearch(e.target.value)}\n              placeholder=\"Search for Pokemon\" />\n          </Col>\n          <Col sm={2} className=\"my-1\">\n            <Button block onClick={(e) => props.getPokemon(search)}>Search</Button>\n          </Col>\n        </Form.Row>\n      </Form>\n    </Container>\n  )\n}","const baseUrl = 'http://pokeapi.co/api/v2';\nconst query = {\n  pokemon: 'pokemon'\n}\n\nexport async function fetchPokemon(pokemon) {\n  console.log(`${baseUrl}/${query.pokemon}/${pokemon}`);\n  return fetch(`${baseUrl}/${query.pokemon}/${pokemon}`)\n}","import React from 'react';\nimport { Container, Row, Col, Card, ProgressBar } from 'react-bootstrap';\n\nexport default function PokemonData(props) {\n  return (\n    <Container className=\"mt-2\">\n      <Row>\n        <Col xs={12} md={6}>\n          <Card>\n            <Card.Header>\n              <h5>{props.name}</h5>\n              <img src={props.sprite} alt={props.name} />\n            </Card.Header>\n            <Card.Body>\n              <h5>Abilities</h5>\n              {props.abilities.map((ability, key) => (\n                <div key={key}>\n                  <span>{ability.ability.name}</span>\n                </div>\n              ))}\n              <h5>Types</h5>\n              {props.types.map((type, key) => (\n                <div key={key}>\n                  <span>{type.type.name}</span>\n                </div>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xs={12} md={6}>\n          <Card>\n            <Card.Body>\n              <h4>Base Stats</h4>\n              {props.stats.map((stat, key) => (\n                <div key={key}>\n                  <strong>{stat.stat.name}</strong>\n                  <ProgressBar now={stat.base_stat} max={255} label={stat.base_stat} />\n                </div>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}","import React from 'react';\nimport Search from '../components/Search';\nimport { fetchPokemon } from '../services/getPokemon';\nimport PokemonData from '../components/PokemonData';\nimport { Spinner, Alert } from 'react-bootstrap';\n\nconst spinnerStyle = {\n  width: '10rem',\n  height: '10rem',\n  borderWidth: '1rem',\n};\n\nconst spinnerWrapperStyle = {\n  textAlign: 'center',\n  marginTop: '50px',\n}\n\nexport default function HomePage() {\n  \n  const [pokemon, setPokemon] = React.useState();\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const [errorMsg, setErrorMsg] = React.useState('');\n\n  const getPokemon = async (query) => {\n    if (!query) {\n      setErrorMsg('You must enter a Pokemon');\n      setError(true);\n      return;\n    }\n    setError(false);\n    setLoading(true);\n    setTimeout(async () => {\n      try {\n        const response = await fetchPokemon(query);\n        const results = await response.json();\n        console.log(results);\n        setPokemon(results);\n        setLoading(false);\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n        setError(true);\n        setErrorMsg('Pokemon not found.');\n      }\n    }, 1500);\n  }\n\n  return (\n    <div>\n      {error ? (<Alert variant='danger'>{errorMsg}</Alert>): null}\n      <Search getPokemon={getPokemon} />\n      {loading ? (\n        <div style={spinnerWrapperStyle}>\n          <Spinner style={spinnerStyle} animation=\"border\" />\n        </div>\n      ) : null}\n      {!loading && pokemon ? (\n        <PokemonData\n          name={pokemon.name}\n          sprite={pokemon.sprites.front_default}\n          abilities={pokemon.abilities}\n          stats={pokemon.stats}\n          types={pokemon.types} />\n      ): null}\n    </div>\n  )\n}","import React from 'react';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\nimport HomePage from './pages/home';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}